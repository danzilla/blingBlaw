#!/usr/bin/env node
// App Global Config
const app = require('../app/app');
const debug = require('debug')(process.env.npm_package_name + ':' + process.env.npm_package_version);
// Get port from environment and store in Express.
const port = normalizePort(process.env.PORT || process.env.npm_package_server_port);
app.set('port', port);

// Create HTTP server
const http = require('http');
const server = http.createServer(app);

// Normalize a port into a number, string, or false.
function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) { // named pipe
    return val;
  }
  if (port >= 0) { // port number
    return port;
  }
  return false;
}
// Event listener for HTTP server "error" event.
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}
// Event listener for HTTP server "listening" event.
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
  // #Yeeeeeee
  let msg0 = "App: " + process.env.npm_package_name + " v" + process.env.npm_package_version;
  let msg1 = "Author: " + process.env.npm_package_author_name;
  let msg2 = "Git: " + process.env.npm_package_homepage;
  let msg3 = "Server running on http://localhost:" + port;
  console.log("\n\n" + msg0 + "\n" + msg1 + "\n" + msg2 + "\n" + msg3 + "\n\n");
}

// Listen on provided port, on all network interfaces.
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);